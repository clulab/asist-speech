#!/usr/bin/env python

"""Agent that listens to the microphone and outputs messages corresponding to
real-time ASR transcriptions. The transcriptions are printed to standard output
by default, but can optionally be published to an MQTT message bus instead.

Author: Adarsh Pyarelal (adarsh@arizona.edu)

Parts of this code are taken from the example provided by Google at
https://github.com/googleapis/python-speech/blob/master/samples/microphone/transcribe_streaming_mic.py

Example usage:
    ./tomcat_asr_agent

To see all available options, run:
    ./tomcat_asr_agent -h

Python package requirements
    - pip install pyaudio (to access the microphone)

    If you are using the Google Cloud speech recognition engine:
        - pip install google-cloud-speech

    If you are using the PocketSphinx engine
        Install pocketsphinx-python:
            - On macOS, use the following steps to install pocketsphinx
              (instructions taken
              from
              https://github.com/bambocher/pocketsphinx-python/issues/28#issuecomment-334493324):
                - Clone the repository:
                    git clone --recursive https://github.com/bambocher/pocketsphinx-python
                    cd pocketsphinx-python

                - Change the following two lines in the file
                'pocketsphinx-python/deps/sphinxbase/src/libsphinxad/ad_openal.c':

                    #include <al.h>
                    #include <alc.h>

                to

                    #include <OpenAL/al.h>
                    #include <OpenAL/alc.h>

                - Then run the following command:
                    python setup.py install

            - On non-macOS machines, you can do 'pip install pocketsphinx'.

        Install the SpeechRecognition package: pip install SpeechRecognition

    If you enable publishing to an MQTT message bus (with the --use_mqtt
    option), you'll need to install the Eclipse Paho Python client library:
        pip install paho-mqtt

To use the Google Cloud Speech Recognition engine, you will need to point the
environment variable GOOGLE_APPLICATION_CREDENTIALS to point to your Google
Cloud credentials file.
"""

from __future__ import division

import re
import sys
import datetime
from dataclasses import dataclass, asdict, field, InitVar
import json
import pyaudio


class MicrophoneStream(object):
    """Opens a recording stream as a generator yielding the audio chunks."""

    def __init__(self, rate: int, chunk: int):
        self._rate = rate
        self._chunk = chunk

        # Create a thread-safe buffer of audio data
        self._buff = queue.Queue()
        self.closed = True

    def __enter__(self):
        self._audio_interface = pyaudio.PyAudio()
        self._audio_stream = self._audio_interface.open(
            format=pyaudio.paInt16,
            # The API currently only supports 1-channel (mono) audio
            # https://goo.gl/z757pE
            channels=1,
            rate=self._rate,
            input=True,
            frames_per_buffer=self._chunk,
            # Run the audio stream asynchronously to fill the buffer object.
            # This is necessary so that the input device's buffer doesn't
            # overflow while the calling thread makes network requests, etc.
            stream_callback=self._fill_buffer,
        )

        self.closed = False

        return self

    def __exit__(self, type, value, traceback):
        self._audio_stream.stop_stream()
        self._audio_stream.close()
        self.closed = True
        # Signal the generator to terminate so that the client's
        # streaming_recognize method will not block the process termination.
        self._buff.put(None)
        self._audio_interface.terminate()

    def _fill_buffer(self, in_data, frame_count, time_info, status_flags):
        """Continuously collect data from the audio stream, into the buffer."""
        self._buff.put(in_data)
        return None, pyaudio.paContinue

    def generator(self):
        while not self.closed:
            # Use a blocking get() to ensure there's at least one chunk of
            # data, and stop iteration if the chunk is None, indicating the
            # end of the audio stream.
            chunk = self._buff.get()
            if chunk is None:
                return
            data = [chunk]

            # Now consume whatever other data's still buffered.
            while True:
                try:
                    chunk = self._buff.get(block=False)
                    if chunk is None:
                        return
                    data.append(chunk)
                except queue.Empty:
                    break

            yield b"".join(data)


@dataclass(frozen=True)
class TA3Header(object):
    timestamp: str
    message_type: str = "observation"
    version: str = "0.1"


@dataclass(frozen=True)
class TA3Msg(object):
    timestamp: str
    experiment_id: str = None
    trial_id: str = None
    version: str = "0.1"
    source: str = "tomcat_asr_agent"
    sub_type: str = "asr"


@dataclass(frozen=True)
class TA3Data(object):
    text: str
    asr_system: str


@dataclass
class TA3Message(object):
    """Class to represent a TA3 testbed message."""

    data: TA3Data
    header: TA3Header = field(init=False)
    msg: TA3Msg = field(init=False)

    def __post_init__(self):
        timestamp: str = datetime.datetime.utcnow().isoformat() + "Z"
        self.header = TA3Header(timestamp)
        self.msg = TA3Msg(timestamp)


class ASRClient(object):
    def __init__(self, args):
        self.use_mqtt = args.use_mqtt
        if self.use_mqtt:
            # Set up the Paho MQTT client.
            self.mqtt_client = MQTTClient()
            self.mqtt_client.connect(args.host, args.port)
            self.publish_topic = args.publish_topic

    def publish_transcript(self, transcript, asr_system):
        ta3_data = TA3Data(transcript, asr_system)
        json_message_str = json.dumps(asdict(TA3Message(ta3_data)))
        if self.use_mqtt:
            self.mqtt_client.publish(self.publish_topic, json_message_str)
        else:
            print(json_message_str)
            # We call sys.stdout.flush() to make this program work with piping,
            # for example, through the jq program.
            sys.stdout.flush()


class GoogleASRClient(ASRClient):
    def __init__(self, args):
        super().__init__(args)
        self.rate = args.rate
        self.chunk_size = args.chunk_size
        self.language_code = args.language_code
        self.speech_client = google.cloud.speech.SpeechClient()

        recognition_config = google.cloud.speech.RecognitionConfig(
            encoding=google.cloud.speech.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=args.rate,
            language_code=args.language_code,
        )

        self.streaming_recognition_config = (
            google.cloud.speech.StreamingRecognitionConfig(
                config=recognition_config, interim_results=True
            )
        )

    def run(self):
        with MicrophoneStream(self.rate, self.chunk_size) as microphone_stream:
            audio_generator = microphone_stream.generator()

            requests = (
                google.cloud.speech.StreamingRecognizeRequest(
                    audio_content=content
                )
                for content in audio_generator
            )

            responses = self.speech_client.streaming_recognize(
                self.streaming_recognition_config, requests
            )

            self.listen_print_loop(responses)

    def listen_print_loop(self, responses):
        """Iterates through server responses and prints them.

        The responses passed is a generator that will block until a response
        is provided by the server.

        Each response may contain multiple results, and each result may contain
        multiple alternatives; for details, see https://goo.gl/tjCPAU.  Here we
        print only the transcription for the top alternative of the top result.

        In this case, responses are provided for interim results as well. If the
        response is an interim one, print a line feed at the end of it, to allow
        the next result to overwrite it, until the response is a final one. For the
        final one, print a newline to preserve the finalized transcription.
        """
        for response in responses:
            if not response.results:
                continue

            # The `results` list is consecutive. For streaming, we only care about
            # the first result being considered, since once it's `is_final`, it
            # moves on to considering the next utterance.
            result = response.results[0]
            if not result.alternatives:
                continue

            # Display the transcription of the top alternative.
            transcript = result.alternatives[0].transcript

            if result.is_final:
                self.publish_transcript(transcript, "Google")


class PocketSphinxASRClient(ASRClient):
    def __init__(self, args):
        super().__init__(args)
        self.recognizer = sr.Recognizer()
        self.source = sr.Microphone(
            sample_rate=args.rate, chunk_size=args.chunk_size
        )

    def run(self):
        stop_listening = self.recognizer.listen_in_background(
            self.source, self.callback
        )
        while True:
            time.sleep(0.1)

        stop_listening(wait_for_stop=False)

    def callback(self, recognizer, audio_data):
        transcript = recognizer.recognize_sphinx(audio_data)
        self.publish_transcript(transcript, "PocketSphinx")


if __name__ == "__main__":
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

    parser = ArgumentParser(
        description="ToMCAT ASR Agent",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--engine",
        type=str,
        help="ASR engine to use",
        choices=("google", "pocketsphinx"),
        default="pocketsphinx",
    )

    parser.add_argument("--rate", type=int, help="Sample rate", default=16000)

    parser.add_argument(
        "--chunk_size", type=int, help="Chunksize in bytes", default=1600
    )

    # See http://g.co/cloud/speech/docs/languages
    # for a list of supported languages.
    parser.add_argument(
        "--language_code",
        type=str,
        help="A BCP-47 language tag (for Google Cloud Speech to Text API)",
        default="en-US",
    )

    parser.add_argument(
        "--use_mqtt",
        action="store_true",
        help="Publish messages to an MQTT message broker instead of printing to stdout.",
    )

    parser.add_argument(
        "--host",
        type=str,
        default="localhost",
        help="Host that the MQTT broker is running on (if the --use_mqtt option is enabled)",
    )

    parser.add_argument(
        "--port",
        type=int,
        default=1883,
        help="Port that the MQTT broker is running on (if the --use_mqtt option is enabled)",
    )

    parser.add_argument(
        "--publish_topic",
        type=str,
        help="Message bus topic to publish to (if the --use_mqtt option is enabled)",
        default="agents/asr_agent",
    )

    args = parser.parse_args()

    if args.use_mqtt:
        from paho.mqtt.client import Client as MQTTClient

    # Select the client
    if args.engine == "google":
        import google.cloud.speech
        from six.moves import queue

        asr_client = GoogleASRClient(args)

    else:

        import time
        import speech_recognition as sr

        asr_client = PocketSphinxASRClient(args)

    # Run the client
    try:
        asr_client.run()
    except KeyboardInterrupt:
        print("Keyboard interrupt (Ctrl-C) detected. Exiting now.")
